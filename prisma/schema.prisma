// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Ideally, we want to separate usage collection from the metadata, however Prisma does not support
// multiple databases properly. https://github.com/prisma/prisma/issues/2443 solution does not
// generate the proper client.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chat {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at")
  model     Json      @default("{}")
  ctx       Json      @default("{}")
  messages  Message[]

  @@index([createdAt], map: "chat_created_at_idx")
  @@map("chat")
}

model Message {
  id        String   @id @default(uuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @map("chat_id")
  createdAt DateTime @default(now()) @map("created_at")
  endUser   String   @default("") @map("end_user")
  role      String   @default("")
  content   String   @default("")
  upvote    Boolean  @default(false)
  downvote  Boolean  @default(false)

  @@index([chatId], map: "message_chat_id_idx")
  @@index([createdAt], map: "message_created_at_idx")
  @@map("message")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}